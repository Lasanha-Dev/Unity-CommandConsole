//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Plugins/CommandConsole/Scripts/Input/CommandConsoleInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.DevConsole
{
    public partial class @CommandConsoleInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CommandConsoleInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CommandConsoleInputActions"",
    ""maps"": [
        {
            ""name"": ""CommandConsole"",
            ""id"": ""f1e4c0c2-ce19-448a-9ecf-d1382643dde1"",
            ""actions"": [
                {
                    ""name"": ""ToggleEnableDisable"",
                    ""type"": ""Button"",
                    ""id"": ""f657d7e8-bb8b-4c23-876f-6eeaa9b3f95e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""2f12a19b-2058-43d4-ae78-0d23bb4e418a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d3fadf5-5a3a-4113-a08b-a2c752e566dc"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleEnableDisable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0e4de26-87a8-4feb-8ec1-e98c7a682268"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CommandConsole
            m_CommandConsole = asset.FindActionMap("CommandConsole", throwIfNotFound: true);
            m_CommandConsole_ToggleEnableDisable = m_CommandConsole.FindAction("ToggleEnableDisable", throwIfNotFound: true);
            m_CommandConsole_Scroll = m_CommandConsole.FindAction("Scroll", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CommandConsole
        private readonly InputActionMap m_CommandConsole;
        private List<ICommandConsoleActions> m_CommandConsoleActionsCallbackInterfaces = new List<ICommandConsoleActions>();
        private readonly InputAction m_CommandConsole_ToggleEnableDisable;
        private readonly InputAction m_CommandConsole_Scroll;
        public struct CommandConsoleActions
        {
            private @CommandConsoleInputActions m_Wrapper;
            public CommandConsoleActions(@CommandConsoleInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleEnableDisable => m_Wrapper.m_CommandConsole_ToggleEnableDisable;
            public InputAction @Scroll => m_Wrapper.m_CommandConsole_Scroll;
            public InputActionMap Get() { return m_Wrapper.m_CommandConsole; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CommandConsoleActions set) { return set.Get(); }
            public void AddCallbacks(ICommandConsoleActions instance)
            {
                if (instance == null || m_Wrapper.m_CommandConsoleActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CommandConsoleActionsCallbackInterfaces.Add(instance);
                @ToggleEnableDisable.started += instance.OnToggleEnableDisable;
                @ToggleEnableDisable.performed += instance.OnToggleEnableDisable;
                @ToggleEnableDisable.canceled += instance.OnToggleEnableDisable;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
            }

            private void UnregisterCallbacks(ICommandConsoleActions instance)
            {
                @ToggleEnableDisable.started -= instance.OnToggleEnableDisable;
                @ToggleEnableDisable.performed -= instance.OnToggleEnableDisable;
                @ToggleEnableDisable.canceled -= instance.OnToggleEnableDisable;
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
            }

            public void RemoveCallbacks(ICommandConsoleActions instance)
            {
                if (m_Wrapper.m_CommandConsoleActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICommandConsoleActions instance)
            {
                foreach (var item in m_Wrapper.m_CommandConsoleActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CommandConsoleActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CommandConsoleActions @CommandConsole => new CommandConsoleActions(this);
        public interface ICommandConsoleActions
        {
            void OnToggleEnableDisable(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
        }
    }
}
